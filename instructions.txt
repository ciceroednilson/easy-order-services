	
    
docker network create lab-network


docker run  -p 3306:3306 --network=lab-network --hostname base-mysql --name base-mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:latest

docker run -p 3000:3306  --network=lab-network --hostname base-mariadb --name bi-mariadb --env MARIADB_ROOT_PASSWORD=123456  mariadb:latest



graylog  
 user: admin
 pwd: admin

docker run --name mongo --network=lab-network -d mongo:5.0
 
docker run --name elasticsearch --network=lab-network -p 9200:9200 -p 9300:9300 \
    -e ES_JAVA_OPTS="-Xms2g -Xmx4g" \
    -e "discovery.type=single-node" -e "xpack.security.enabled=false" \
    -e "bootstrap.memory_lock=true" --ulimit memlock=-1:-1 \
    -d docker.elastic.co/elasticsearch/elasticsearch:5.6.11



docker run -d --name graylog  --network=lab-network \
  -e GRAYLOG_PASSWORD_SECRET=$(openssl rand -base64 32) \
  -e GRAYLOG_ROOT_PASSWORD_SHA2=$(echo -n "123456" | sha256sum | awk '{print $1}') \
  -e GRAYLOG_HTTP_EXTERNAL_URI=http://localhost:9000/ \
  -p 9000:9000 \
  -p 12201:12201 \
  --link mongo \
  --link elasticsearch \
  graylog/graylog:6.0


Endereço graylog
  http://localhost:9000/



 swagger categories
 
  http://localhost:8080/q/swagger-ui


https://quarkus.io/guides/centralized-log-management


./gradlew addExtension --extensions='logging-gelf'


curl -H "Content-Type: application/json" -H "Authorization: Basic YWRtaW46YWRtaW4=" -H "X-Requested-By: curl" -X POST -v -d \
'{"title":"udp input","configuration":{"recv_buffer_size":262144,"bind_address":"0.0.0.0","port":12201,"decompress_size_limit":8388608},"type":"org.graylog2.inputs.gelf.udp.GELFUDPInput","global":true}' \
http://localhost:9000/api/system/inputs



micronaut

http://localhost:8080/swagger-ui


http://localhost:8080/swagger


https://hub.docker.com/r/dkron/dkron

docker run -d \
  --name some-dkron \
  --network lab-network \
  -p 2000:8080 \
  dkron/dkron agent --server



java.net.UnknownHostException: kafka
127.0.0.1 kafka


Inicialize um módulo Go: Execute o seguinte comando para criar um novo módulo Go. Substitua nome-do-modulo pelo nome desejado, que geralmente é um URL de repositório.

go mod init golang-products-consumer


export GOPROXY=https://proxy.golang.org


